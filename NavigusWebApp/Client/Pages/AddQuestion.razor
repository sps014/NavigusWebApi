@page "/addquestions/{id}"
@using NavigusWebApp.Client.Data
@using NavigusWebApp.Shared.Models
@inject HttpClient Http
@inject NavigationManager Nav
<NavMenu></NavMenu>

<div class="p-4 bg-dark m-4">
    @if(!string.IsNullOrWhiteSpace(err))
    {
        <div class="alert alert-danger">@err</div>
    }
    <p>Question</p>
    <input type="text" class="form-control" @bind-value="q.Question" placeholder="Write Question here"/>
    <div class="m-2 alert" style="background-color:#2a2a30"> 
        <p>Options</p>
    @foreach (var (v,i) in options.Select((v, i) => (v,i)))
    {
        <p>@(i+1) @v &nbsp;&nbsp;<i class="fas fa-trash" @onclick="() => { options.RemoveAt(i); StateHasChanged();}"></i></p>
    }

    <input type="text" class="form-control" @bind-value="opt"/>
    <div class="btn btn-primary my-4" @onclick="() => { options.Add((string)opt.Clone()); StateHasChanged();}">Add Option</div>
     </div>

      <div class="m-2 alert" style="background-color:#2a2a30"> 
        <p>Correct Options Number (0 index based and separated by ',')</p>
    
    <input type="text" class="form-control" @bind-value="correctOptions"/>
     </div>

     <div>
         <p>Difficulty (0-10)</p>
          <input type="number" class="form-control" @bind-value="q.Difficulty"/>

          <p class="my-2">Points (0-10)</p>
          <input type="number" class="form-control my-2" @bind-value="q.Points"/>

     </div>

     <div class="btn btn-success" @onclick="Submit">Submit</div>

</div>

@code
{
    [Parameter]public  string id { get; set; }
    
    QuestionModel q = new QuestionModel();
    List<string> options = new List<string>();
    string correctOptions = "";
    string opt;
    string err;

    async Task Add_Question()
    {
        Http.DefaultRequestHeaders.Authorization = CredsData.HeaderJWT;
        try
        {
             var r=await Http.PostAsJsonAsync("/Question/add/"+id,q);

            if (r.IsSuccessStatusCode)
            {
                Nav.NavigateTo("/viewcourse/"+id);
            }
            else
            {
                err = await r.Content.ReadAsStringAsync();
            }
            StateHasChanged();
        }
        catch (Exception _)
        {
            Console.WriteLine("Failed");
        }
        StateHasChanged();
    }
    async Task Submit()
    {
        q.Options = options.ToArray();
        var parts = correctOptions.Split(',');

        var co = new List<int>();
        foreach(var v in parts)
        {
            if (int.TryParse(v, out int res))
            {
                co.Add(res);
            }
            else
            {
                err="invalid correct option "+v;
                StateHasChanged();
                return;
            }
        }

        q.CorrectOptionIndexs = co.ToArray();

        await Add_Question();  
    }
}


<style>
    head,body
    {
        background-image: radial-gradient( circle farthest-corner at 32.7% 82.7%,  rgba(173,0,171,1) 8.3%, rgba(15,51,92,1) 79.4% );
        height: 100vh;
    }
</style>