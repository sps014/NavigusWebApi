@page "/viewcourse/{id}"
@using NavigusWebApi.Models
@using NavigusWebApp.Client.Data
@inject HttpClient Http
@inject NavigationManager Nav

<NavMenu></NavMenu>
@if (course is not null)
{
    <p class="mb-2">Course ID</p>
    <input type="text" class="form-control" @bind-value="@course.CourseId"/>
    <p class="my-2">Course Name:</p>
    <input type="text" class="form-control m-2" @bind-value="@course.CourseName"/>
    @if (!string.IsNullOrWhiteSpace(quizError))
    {
        <div class="alert alert-danger">@quizError</div>
    }
    <div class="btn btn-primary mb-4" @onclick="async () => {await SaveQuiz();}">Save</div>
    <div class="alert alert-info">

        <p>Quiz Duration</p>
            <input type="number" class="form-control" @bind-value="course.Quiz.Duration"/>
        <p>Quiz Passing Marks </p>
            <input type="number" class="form-control" @bind-value="course.Quiz.PassingMarks"/>

    </div>

    <button class="btn btn-secondary" @onclick="GoToAdd">Add Question</button>

    foreach (var (q,i) in course.Quiz.Questions.Select((q,i)=>(q,i)))
    {
        <div class="alert alert-secondary m-4">
            <p style="font-weight: bold">Question: @q.Question</p>
            <p>Options:</p>
            @foreach (var o in q.Options)
            {
                <p class="text-primary">@o</p>
            }
            <p>Correct Answer(s):</p>
            @foreach (var o in q.CorrectOptionIndexs)
            {
                <p class="text-success">@q.Options[o]</p>
            }
            <p class="text-danger">Point: @q.Points</p>
            @* <p>Tags: @q.Tags</p> *@
            <div class="btn btn-danger m-2" @onclick="async()=>{await DeleteQues(i);}">Delete</div>

        </div>

    }

}

@code 
{

    [Parameter]public  string id { get; set; }
    CourseModel course = null;
    protected override async Task OnInitializedAsync()
    {
        await FetchCurrent();
    }

    async Task FetchCurrent()
    {
        Http.DefaultRequestHeaders.Authorization = CredsData.HeaderJWT;
        try
        {
            course= await Http.GetFromJsonAsync<CourseModel>("/Course/get/"+id);
        }
        catch (Exception _)
        {
            Console.WriteLine("Failed");
        }
        StateHasChanged();
    }

    string quizError = "";
    
    async Task SaveQuiz()
    {
         var res=await Http.PostAsJsonAsync("/Course/edit/"+id,course);
        if (res.IsSuccessStatusCode)
        {
            quizError = null;
        }
        else
        {
            quizError = await res.Content.ReadAsStringAsync();
        }
        StateHasChanged();
    }
    async Task DeleteQues(int ind)
    {
        var res=await Http.GetAsync("/Question/delete/"+id+"/"+ind);
        if (res.IsSuccessStatusCode)
        {
            quizError = null;
            var nl = course.Quiz.Questions.ToList();
            nl.RemoveAt(ind); ;
            course.Quiz.Questions =nl.ToArray();
        }
        else
        {
            quizError = await res.Content.ReadAsStringAsync();
        }
        StateHasChanged();
    }
    void GoToAdd()
    {
        Nav.NavigateTo("addquestions/"+id);
    }
}

<style>
    head,body
    {
    background-color: #A9C9FF;
    background-image: linear-gradient(180deg, #A9C9FF 0%, #FFBBEC 100%);
    height: 100%;
    }
</style>