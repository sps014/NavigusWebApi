@page "/startquiz/{id}"
@using NavigusWebApi.Models
@using NavigusWebApp.Client.Data
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Nav

<NavMenu></NavMenu>

@if (!string.IsNullOrWhiteSpace(err))
{
    <div class="alert alert-danger">
        @err
    </div>
}
<div class="alert alert-primary">
@if (course != null)
{
    <p>@course.CourseId</p>
}
@if (loadedProfile)
{
    <p>Points : @stud.PointsObtained</p>
    <p>XP : @stud.XpObtained</p>
    <p>IsPass @passed</p>

}
</div>

@if (loadedProfile && current>=0 && course!=null && course.Quiz.Questions.Length>current)
{
    <p>@CurQ().Question</p>
    @foreach (var (v,i) in CurQ().Options.Select((v,i)=>(v,i)))
    {
        <input type="checkbox" id="@v" name="@v" @bind="selected[i]">
        <label for="@v">@v</label><br>
    }
    <button class="btn btn-primary" @onclick="Submit">Submit</button>

}
@code 
{

    [Parameter]
    public string id { get; set; }

    string err;

    StudentCourseDetailsModel stud;
    CourseModel course;

    bool loadedProfile;
    int current = -2;
    List<bool> selected;
    bool passed = false;

    QuestionModel CurQ() => course==null?null:course.Quiz.Questions.Length>current && current>=0?course.Quiz.Questions[current]:null;

    protected override async Task OnInitializedAsync()
    {
        var s = await FetchAll();
        stud = s.EnrolledCourses.First(x => x.CourseId == id);
        await FetchCourse();
        StateHasChanged();
    }

    async Task<StudentModel> FetchAll()
    {

        Http.DefaultRequestHeaders.Authorization = CredsData.HeaderJWT;
        try
        {
            return await Http.GetFromJsonAsync<StudentModel>("/Student/enrolledlist");
        }
        catch (Exception _)
        {
            return null;
        }
    }

    async Task Submit()
    {
        var anon = new
        {
            CourseId = stud.CourseId,
            QuestionIndex = current,
            Answers = selected.Select((a, i) => (a, i)).Where((a) => a.a==true).Select((a,i)=>i).ToArray()
        };

        var r=await Http.PostAsJsonAsync("/Student/submitanswer/",anon);
        if(r.IsSuccessStatusCode)
        {
            var res = JsonSerializer.Deserialize<AnsRes>(await r.Content.ReadAsStringAsync());
            stud.XpObtained = res.XP;
            stud.PointsObtained = res.Points;
            passed = res.PassStatus;

            if (current+1 < course.Quiz.Questions.Length)
                DisplayQuestion(current+1);
            else
            {
                Nav.NavigateTo("/enrolled");
            }
        }
        else
        {
            err = await r.Content.ReadAsStringAsync();
            if(err.Contains("already submitted answer"))
            {
                DisplayQuestion(current + 1);
            }
        }
        StateHasChanged();
    }
    async Task FetchCourse()
    {

        Http.DefaultRequestHeaders.Authorization = CredsData.HeaderJWT;
        try
        {
            course= await Http.GetFromJsonAsync<CourseModel>("/Course/get/"+id);
            loadedProfile = true;
            DisplayQuestion(0);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    void DisplayQuestion(int ind)
    {
        current = ind;
        selected = new bool[CurQ().Options.Length].ToList();
        StateHasChanged();

    }
    class AnsRes
    {
        public bool PassStatus{ get; set; }
        public int Points{ get; set; }
        public int XP{ get; set; }
        public int NextQuestionSmartSuggestionIndex{ get; set; }
    }
}