@page "/startquiz/{id}"
@using System.Text.Json
@using NavigusWebApp.Client.Data
@using NavigusWebApp.Shared.Models
@inject HttpClient Http
@inject NavigationManager Nav

<NavMenu></NavMenu>

@if (!string.IsNullOrWhiteSpace(err))
{
    <div class="alert alert-danger">
        @err
    </div>
}
<div class="alert alert-dark bg-dark text-white">

@if (course != null)
{
    <p style="color:deeppink">@course.CourseId</p>
    <p style="color:yellow">Duration: @course.Quiz.Duration min</p>
    <div class="mb-4"></div>
    }
@*@if (result!=null)
{
    <p>Points : @result.Points</p>
    <p>XP : @result.XP</p>
    <p>IsPass @result.PassStatus</p>

*@

@if (loadedProfile && current>=0 && course!=null && course.Quiz.Questions.Length>current)
{
    <p style="font-weight:bold">Q.@(current+1) @CurQ().Question</p>
    <p style="font-style:italic">Select 1 or more options</p>
    @foreach (var (v,i) in CurQ().Options.Select((v,i)=>(v,i)))
    {
        <input type="checkbox"  class="form-check-input" id="@v" name="@v" @bind="selected[i]">
        <label class="form-check-label" id="@v">@v</label><br>
    }
    <button class="btn btn-primary mt-4" @onclick="async()=>{await Submit(); StateHasChanged();}">Submit</button>

}
</div>

@code 
{

    [Parameter]
    public string id { get; set; }

    string err;

    StudentCourseDetailsModel stud;
    CourseModel course;

    AnsRes result;

    bool loadedProfile;
    int current = -2;
    List<bool> selected;

    QuestionModel CurQ() => course==null?null:course.Quiz.Questions.Length>current && current>=0?course.Quiz.Questions[current]:null;

    protected override async Task OnInitializedAsync()
    {
        var s = await FetchAll();
        stud = s.EnrolledCourses.First(x => x.CourseId == id);
        await FetchCourse();
        StateHasChanged();
    }

    async Task<StudentModel> FetchAll()
    {

        Http.DefaultRequestHeaders.Authorization = CredsData.HeaderJWT;
        try
        {
            return await Http.GetFromJsonAsync<StudentModel>("/Student/enrolledlist");
        }
        catch (Exception _)
        {
            return null;
        }
    }

    async Task Submit()
    {
        var ans = new List<int>();
        for (var i = 0; i < CurQ().Options.Length; i++)
        {
            if(selected[i])
            {
                ans.Add(i);
            }
        }
        var anon = new
        {
            CourseId = stud.CourseId,
            QuestionIndex = current,
            Answers = ans.ToArray()
        };

        var r=await Http.PostAsJsonAsync("/Student/submitanswer/",anon);
        if(r.IsSuccessStatusCode)
        {
            var str=await r.Content.ReadAsStringAsync();
            result = JsonSerializer.Deserialize<AnsRes>(str);
            
            base.StateHasChanged();

            if (current+1 < course.Quiz.Questions.Length)
                DisplayQuestion(current+1);
            else
            {
                Nav.NavigateTo("/enrolled");
            }
        }
        else
        {
            err = await r.Content.ReadAsStringAsync();
            if(err.Contains("already submitted answer"))
            {
                DisplayQuestion(current + 1);
            }
        }
        StateHasChanged();
    }
    async Task FetchCourse()
    {

        Http.DefaultRequestHeaders.Authorization = CredsData.HeaderJWT;
        try
        {
            course= await Http.GetFromJsonAsync<CourseModel>("/Course/get/"+id);
            loadedProfile = true;
            DisplayQuestion(0);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    void DisplayQuestion(int ind)
    {
        current = ind;
        selected = new bool[CurQ().Options.Length].ToList();
        StateHasChanged();

    }
    class AnsRes
    {
        public bool PassStatus{ get; set; }
        public int Points{ get; set; }
        public int XP{ get; set; }
        public int NextQuestionSmartSuggestionIndex{ get; set; }
    }
}

<style>
    html,body{
        background-image: radial-gradient( circle farthest-corner at 32.7% 82.7%,  rgba(173,0,171,1) 8.3%, rgba(15,51,92,1) 79.4% );
        height:100%;
    }
</style>