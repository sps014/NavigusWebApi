@page "/enrolled"

@using NavigusWebApp.Client.Data
@using System.Net.Http.Headers
@using NavigusWebApp.Shared.Models

@inject HttpClient Http
@inject NavigationManager Nav
<NavMenu></NavMenu>

@if (courses is not null)
{
    <div class="container">
        <div class="row">
            @foreach (var c in courses.EnrolledCourses)
            {
                <div class="card text-white bg-dark m-3" style="max-width: 18rem;">
                    <div class="card-header m-2">@c.CourseId</div>
                    <div class="card-body m-2">
                        <h5 class="card-title mb-2" style="color:yellow">Enrolled in @(CourseIdToName[c.CourseId])</h5>
                        @if (!c.QuizStarted)
                        {
                            <div class="btn btn-primary m-2" @onclick="async ()=>await GoToQuiz(c.CourseId)">Begin Quiz</div>
                        }
                        else
                        {
                            <p style="color:pink" class="mt-4 my-2">Marks: @c.PointsObtained</p>
                            <p style="color:pink">XP: @c.XpObtained</p>
                            <p>Enrolled on @c.EnrollTime.ToString()</p>

                        }
                    </div>
                </div>

            }
        </div>

    </div>
}


@code 
{
    StudentModel courses;
    protected override async Task OnInitializedAsync()
    {
        courses = await FetchAll();
        if (courses == null)
            return;
        foreach (var item in courses.EnrolledCourses)
        {
            CourseIdToName.Add(item.CourseId, await CourseName(item.CourseId));
        }
        StateHasChanged();
    }
    Dictionary<string, string> CourseIdToName = new Dictionary<string, string>();
    async Task<StudentModel> FetchAll()
    {

        Http.DefaultRequestHeaders.Authorization = CredsData.HeaderJWT;
        CourseIdToName.Clear();
        try
        {
            return await Http.GetFromJsonAsync<StudentModel>("/Student/enrolledlist");
        }
        catch (Exception _)
        {
            return null;
        }
    }
    async Task<string> CourseName(string id)
    {
        var v=await Http.GetFromJsonAsync<CourseModel>("Course/get/" + id);
        return v.CourseName;
    }


    async Task GoToQuiz(string id)
    {

        var res =await Http.GetAsync("/Student/startquiz/" + id);
        if(res.IsSuccessStatusCode)
        {
             Nav.NavigateTo("startquiz/"+id);
        }
        else
        {
            Console.WriteLine("You can't start quiz oops");
        }
    }
    

    

}

<style>
    head,body
    {
        background-image: radial-gradient( circle farthest-corner at 32.7% 82.7%,  rgba(173,0,171,1) 8.3%, rgba(15,51,92,1) 79.4% );
        height: 100vh;
    }
</style>