@page "/leaderboard"
@using NavigusWebApp.Client.Data
@using NavigusWebApp.Shared.Models
@inject HttpClient Http

<NavMenu></NavMenu>
@if (courses != null)
{
    <p>selected Course </p>
    <select name="id" id="id" @onchange="Changed" class="form-control bg-dark text-white">
        @foreach (var v in courses)
        {
            <option value="@v.CourseId">@v.CourseId</option>
        }
    </select>

    <div class="m-4">
        @foreach(var s in scores)
        {
            <div class="alert bg-dark m-2">
                <p>User Name : @(uidNamePair[s.Uid])</p>
                <p> XP: @s.Xp</p>
                <p>Points :@s.Points</p>
            </div>
        }
    </div>
    
    
}


@code {
    List<CourseModel> courses = new List<CourseModel>();

    string selected;

    List<ScoreModel> scores = new List<ScoreModel>();

    Dictionary<string, string> uidNamePair = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        courses = await FetchAll();
        if(courses.Count>=1)
        {
            selected = courses[0].CourseId;
            await FetchScores();
        }
        StateHasChanged();
    }

    async Task Changed(ChangeEventArgs e)
    {
        selected = (string) e.Value;
        await FetchScores();
    }

    async Task FetchScores()
    {
        var n = await Http.GetFromJsonAsync<List<ScoreModel>>("Leaderboard/get/"+selected);
        if (n == null)
            return;

        scores = n;
        await FetchNames();
        StateHasChanged();
    }
    async Task FetchNames()
    {
        uidNamePair.Clear();
        if(courses==null)
        {
            return;
        }
        foreach (var score in scores)
        {
            var n = await Http.GetAsync("Auth/getName/" + score.Uid);
            if(n.IsSuccessStatusCode)
            {
                uidNamePair.Add(score.Uid,await n.Content.ReadAsStringAsync());
            }
            else
            {
                uidNamePair.Add(score.Uid,score.Uid);
            }
        }
    }

    async Task<List<CourseModel>> FetchAll()
    {

        Http.DefaultRequestHeaders.Authorization = CredsData.HeaderJWT;
        try
        {
            return await Http.GetFromJsonAsync<List<CourseModel>>("/Course/list");
        }
        catch (Exception _)
        {
            return new List<CourseModel>();
        }
    }

}

<style>
    html,body{
        background-image: radial-gradient( circle farthest-corner at 32.7% 82.7%,  rgba(173,0,171,1) 8.3%, rgba(15,51,92,1) 79.4% );
        height:100%;
    }
</style>