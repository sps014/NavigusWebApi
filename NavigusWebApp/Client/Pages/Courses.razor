@page "/Courses"
@using NavigusWebApp.Client.Data
@using System.Net.Http.Headers
@using NavigusWebApp.Shared.Models

@inject HttpClient Http
@inject NavigationManager Nav
<NavMenu></NavMenu>

@if(CredsData.Role==Roles.Teacher)
{
        <button class="btn btn-success mx-2 m-6" @onclick="AddNew">Add Course</button>
}

<div class="container">
    <div class="row">
    @foreach (var c in courses)
    {
        <div class="card text-white bg-dark m-3" style="max-width: 18rem;">
            <div class="card-header m-2">@c.CourseId</div>
            <div class="card-body m-2">
                <h5 class="card-title">@c.CourseName</h5>
                @if (CredsData.Role == Roles.Student)
                {
                    @if(enrolled.Contains(c.CourseId))
                    {
                            <p style="color:yellow">Already Enrolled</p>
                    }
                    else
                    {
                        <div class="btn btn-success m-2" @onclick="async()=>await Enroll(c.CourseId)">Enroll</div>
                    }
                }
                else
                {
                        <div class="btn btn-danger m-2" @onclick="async()=>await Del(c)">Delete</div>
                        <div class="btn btn-info m-2" @onclick="() => { GoToView(c.CourseId);}">View</div>
                }
            </div>
        </div>

    }
    </div>

</div>


@code 
{
    List<CourseModel> courses = new List<CourseModel>();
    HashSet<string> enrolled = new HashSet<string>();
    protected override async Task OnInitializedAsync()
    {
        courses = await FetchAll();
        if(CredsData.Role==Roles.Student)
        enrolled = await FetchEnrolled();
        StateHasChanged();
    }

    async Task<List<CourseModel>> FetchAll()
    {

        Http.DefaultRequestHeaders.Authorization = CredsData.HeaderJWT;
        try
        {
            return await Http.GetFromJsonAsync<List<CourseModel>>("/Course/list");
        }
        catch (Exception _)
        {
            return new List<CourseModel>();
        }
    }

    async Task Del(CourseModel c)
    {
        Http.DefaultRequestHeaders.Authorization = CredsData.HeaderJWT;
        await Http.GetAsync("/Course/delete/" + c.CourseId);
        courses.Remove(c);
        StateHasChanged();
    }

    async Task Enroll(string id)
    {
         Http.DefaultRequestHeaders.Authorization = CredsData.HeaderJWT;
         var r=await Http.GetAsync("/Student/enroll/" + id);
         Nav.NavigateTo("enrolled");
    }

    void GoToView(string id)
    {
        Nav.NavigateTo("/viewcourse/"+id);
    }

    void AddNew()
    {
        Nav.NavigateTo("/newcourse");
    }
    async Task<HashSet<string>> FetchEnrolled()
    {
        var r = await Http.GetFromJsonAsync<StudentModel>("/Student/enrolledlist/");
        if(r!=null)
        {
            return r.EnrolledCourses.Select(x => x.CourseId).ToHashSet();
        }
        return new HashSet<string>();
    }

}

<style>
    head,body
    {
        background-image: radial-gradient( circle farthest-corner at 32.7% 82.7%,  rgba(173,0,171,1) 8.3%, rgba(15,51,92,1) 79.4% );
        height: 100vh;
    }
</style>